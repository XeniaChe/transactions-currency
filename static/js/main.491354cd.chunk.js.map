{"version":3,"sources":["Components/SummaryCalculation/TransactionItem/TransactionItem.module.scss","Components/SummaryCalculation/MaxTransactionItem/MaxTransactionItem.module.scss","Components/Input/InputMainBox.module.scss","Components/UI/TransactionSummary.module.scss","Components/UI/MaxTransactionView/MaxTransactionView.module.scss","App.module.css","Container/TransactionBuild.module.scss","Components/Input/CurrentRate/InputCurrent.module.scss","Components/Input/UserValue/InputUserValue.module.scss","Components/UI/TransactionsListView/TransactionsListView.module.scss","Components/UI/TransactionsListView/Sum/TransactionSum.module.scss","Components/Context/State-context.js","Components/Input/InputMainBox.js","Components/Input/CurrentRate/InputCurrent.js","Components/Input/UserValue/InputUserValue.js","Components/SummaryCalculation/TransactionItem/TransactionItem.js","Components/SummaryCalculation/TransactionsList/TransactionsList.js","Components/UI/TransactionsListView/Sum/TransactionSum.js","Components/UI/TransactionsListView/TransactionsListView.js","Components/SummaryCalculation/MaxTransactionItem/MaxTransactionItem.js","Components/UI/MaxTransactionView/MaxTransactionView.js","Components/UI/TransactionSummary.js","Container/TransactionBuild.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","authContext","React","createContext","currentRate","transactionName","transactionValue","transactions","total","maxTransaction","InputMainBox","props","stateContext","useContext","StateContext","btnDisabled","length","className","classes","InputBox__values","children","BtnAdd","onClick","addTransaction","disabled","InputCurrent","InputBox__current","htmlFor","id","placeholder","onChange","event","input","ref","required","InputUserValue","single_value","label","TransactionItem","Title","transName","EuroValue","transEuroValue","PlnValue","transPlnValue","BtnClose","delete","TransactionList","transList","list","undefined","map","el","index","name","valueEuro","valuePln","key","TransactionSum","Summ","TransactionsListView","List__box","TransactionsList","MaxTransaction","MaxTransactionItem","MaxTransactionView","maxObjLengh","Object","keys","style","MaxTransView","push","not_active","join","TransactionSummary","TransactionInput","state","inputCurrentHandler","e","valueCurrent","target","value","valueCurFix","parseFloat","toFixed","setState","currentChengeRecalculation","inputNameHandler","valueName","inputValueHandler","valueFix","totalSumCalculation","trans","totalSum","totalSumFix","maxValueCalculation","valueArr","maxValue","reduce","a","b","Math","max","indexOfMax","findIndex","maxObject","find","_","addTransactionHandler","isNaN","CurrencyCalc","transaction","newTransactions","document","getElementById","alert","deleteTransactionItemHandler","elIndex","splice","newRate","this","Provider","InputBox","checking","Component","App","TransactionBuild","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.491354cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TransactionItem\":\"TransactionItem_TransactionItem__2kGwO\",\"Title\":\"TransactionItem_Title__1iiE4\",\"EuroValue\":\"TransactionItem_EuroValue__LayYU\",\"PlnValue\":\"TransactionItem_PlnValue__37iLp\",\"BtnClose\":\"TransactionItem_BtnClose__1UAr5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MaxTransactionItem\":\"MaxTransactionItem_MaxTransactionItem__37ssS\",\"Title\":\"MaxTransactionItem_Title__atgyj\",\"EuroValue\":\"MaxTransactionItem_EuroValue__2SnG4\",\"PlnValue\":\"MaxTransactionItem_PlnValue__33pg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputBox__values\":\"InputMainBox_InputBox__values__1etk8\",\"BtnAdd\":\"InputMainBox_BtnAdd__3gJlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TransactionSummary\":\"TransactionSummary_TransactionSummary__ARPkr\",\"not_active\":\"TransactionSummary_not_active__7kShf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MaxTransView\":\"MaxTransactionView_MaxTransView__1qGHq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2nmH9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputBox\":\"TransactionBuild_InputBox__c7_0K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputBox__current\":\"InputCurrent_InputBox__current__382WU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"single_value\":\"InputUserValue_single_value__1QaYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List__box\":\"TransactionsListView_List__box__1yzh1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Summ\":\"TransactionSum_Summ__4PL3r\"};","import React from 'react';\r\n\r\nconst authContext = React.createContext({\r\n    currentRate: 0,\r\n    transactionName: '',\r\n    transactionValue: 0,\r\n    transactions: [],\r\n    total: 0,\r\n    maxTransaction: {}, \r\n})\r\n\r\nexport default authContext;","import React, {Fragment, useContext} from 'react';\r\nimport classes from './InputMainBox.module.scss';\r\nimport StateContext from '../Context/State-context';\r\n\r\nconst InputMainBox =(props) => {\r\n    const stateContext = useContext(StateContext);\r\n    //Checking button if disavbled\r\n    let btnDisabled = false;\r\n    if ((stateContext.currentRate || stateContext.transactionValue) === 0 \r\n    || stateContext.transactionName.length <=0 ) \r\n    { btnDisabled = !btnDisabled };\r\n\r\n    return(\r\n        <Fragment>\r\n            <div className={classes.InputBox__values}>\r\n            <h2>Transaction details</h2>\r\n                {props.children}\r\n            </div>\r\n            <button className={classes.BtnAdd} onClick={props.addTransaction} disabled={btnDisabled}> ADD </button>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default InputMainBox;\r\n","import React from 'react';\r\nimport classes from './InputCurrent.module.scss'\r\n\r\nconst InputCurrent =(props) => {\r\n    return(\r\n        <div className={classes.InputBox__current}>\r\n            <label htmlFor='currentRate'>Current Rate:</label>\r\n            <p>1 EURO = x zl</p>\r\n            <input id='currentRate' placeholder='PLN' onChange={event => props.input(event)} ref={props.ref} required></input>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InputCurrent;","import React from 'react';\r\nimport classes from './InputUserValue.module.scss';\r\n\r\n\r\nconst InputUserValue =(props) => {\r\n    return(\r\n        <div className={classes.single_value}>\r\n            <label htmlFor={props.id} >{props.label}</label>\r\n            <input id={props.id} placeholder={props.placeholder} onChange={event => props.input(event)} required></input>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InputUserValue;","import React  from 'react';\r\nimport classes from './TransactionItem.module.scss';\r\n\r\nconst TransactionItem = (props) => {\r\n    return(\r\n            <div className={classes.TransactionItem}>\r\n                <p className={classes.Title}>{props.transName}</p>\r\n                <p className={classes.EuroValue}>{props.transEuroValue} euro</p>\r\n                <p className={classes.PlnValue}>{props.transPlnValue} zl</p>\r\n                <button className={classes.BtnClose} onClick={(event) => props.delete(event)}>&times;</button>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default TransactionItem;","import React, {Fragment,useContext} from 'react';\r\nimport TransactionItem from '../TransactionItem/TransactionItem';\r\nimport StateContext from '../../Context/State-context';\r\n\r\nconst TransactionList = (props) => {\r\n    const stateContext = useContext(StateContext);\r\n\r\n    let transList = null;\r\n    let list;\r\n\r\n    if( stateContext.transactions !== undefined) {\r\n        list = stateContext.transactions\r\n    };\r\n\r\n    transList = list.map( (el, index) =>{\r\n        return <TransactionItem \r\n                    transName={el.name}\r\n                    transEuroValue={el.valueEuro}\r\n                    transPlnValue={el.valuePln}\r\n                    key={index}\r\n                    delete={(event) => props.delete(event, index)}/>\r\n    });\r\n    \r\n    return(\r\n        <Fragment>\r\n            {transList}\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default TransactionList;\r\n","import React, {useContext, Fragment} from 'react';\r\nimport classes from './TransactionSum.module.scss';\r\nimport StateContext from '../../../Context/State-context';\r\n\r\nconst TransactionSum = (props) => {\r\n    const stateContext = useContext(StateContext);\r\n    return(\r\n        <Fragment>\r\n            { stateContext.total!==0 ? <div className={classes.Summ}>\r\n                <h3>Total:</h3>\r\n                <p> {stateContext.total} zl </p> \r\n            </div> : null}\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default TransactionSum;","import React, {useContext} from 'react';\r\nimport classes from './TransactionsListView.module.scss';\r\nimport TransactionsList from '../../SummaryCalculation/TransactionsList/TransactionsList';\r\nimport TransactionSum from './Sum/TransactionSum';\r\n\r\nconst TransactionsListView = (props) => {\r\n    return(\r\n        <div className={classes.List__box}>\r\n            <h3>Added transactions list:</h3>\r\n            <TransactionsList delete={props.delete}/>\r\n            <TransactionSum />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TransactionsListView;","import React, {useContext} from 'react';\r\nimport classes from './MaxTransactionItem.module.scss';\r\nimport StateContext from '../../Context/State-context';\r\n\r\nconst MaxTransaction = (props) => {\r\n    const stateContext = useContext(StateContext);\r\n    return(\r\n            <div className={classes.MaxTransactionItem}>\r\n                <p className={classes.Title}>{stateContext.maxTransaction.name}</p>\r\n                <p className={classes.EuroValue}>{stateContext.maxTransaction.valueEuro} euro</p>\r\n                <p className={classes.PlnValue}>{stateContext.maxTransaction.valuePln} zl</p>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default MaxTransaction;","import React, {useContext} from 'react';\r\nimport classes from './MaxTransactionView.module.scss';\r\nimport MaxTransaction from '../../SummaryCalculation/MaxTransactionItem/MaxTransactionItem';\r\nimport StateContext from '../../Context/State-context';\r\n\r\nconst MaxTransactionView = (props) => {\r\n    const stateContext = useContext(StateContext);\r\n\r\n    //checking if max object is not empty\r\n    let maxObjLengh = Object.keys(stateContext.maxTransaction).length;\r\n\r\n    // active state toogle\r\n    let style = [classes.MaxTransView];\r\n    if (stateContext.transactions.length === 0) {\r\n        style.push(classes.not_active);\r\n    }\r\n\r\n    return(\r\n        <div className={style.join(' ')}>\r\n            <h3>Your maximum transaction:</h3>\r\n            { maxObjLengh > 0 ?  <MaxTransaction /> : null} \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MaxTransactionView;","import React, {useContext} from 'react';\r\nimport classes from './TransactionSummary.module.scss';\r\nimport TransactionsListView from './TransactionsListView/TransactionsListView';\r\nimport MaxTransactionView from './MaxTransactionView/MaxTransactionView';\r\nimport StateContext from '../Context/State-context';\r\n\r\n\r\nconst TransactionSummary = (props) => {\r\n    const stateContext = useContext(StateContext);\r\n\r\n    let style = [classes.TransactionSummary];\r\n    if (stateContext.transactions.length === 0) {\r\n        style.push(classes.not_active);\r\n    }\r\n    return(\r\n        <div className={style.join(' ')} >\r\n            <TransactionsListView delete={props.delete} />\r\n            <MaxTransactionView />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TransactionSummary;","import React, {Component, Fragment} from 'react';\r\nimport classes from './TransactionBuild.module.scss';\r\nimport InputMainBox from '../Components/Input/InputMainBox';\r\nimport InputCurrent from '../Components/Input/CurrentRate/InputCurrent';\r\nimport InputUserValue from '../Components/Input/UserValue/InputUserValue';\r\nimport StateContext from '../Components/Context/State-context';\r\nimport TransactionSummary from '../Components/UI/TransactionSummary';\r\n\r\n\r\n\r\nclass TransactionInput extends  Component {\r\n    state = {\r\n        currentRate: 0,\r\n        transactionName: '',\r\n        transactionValue: 0,\r\n        transactions: [],\r\n        total: 0,\r\n        maxTransaction: {},\r\n    }\r\n\r\n    currentChengeRecalculation (newRate) {\r\n        if (this.state.currentRate !== newRate && this.state.transactions.length > 0 ) {\r\n            let totalSum = 0;\r\n            for (const key of this.state.transactions ) {\r\n                key.valuePln = parseFloat(( newRate * key.valueEuro).toFixed(2));\r\n                \r\n                //recalc of total sum\r\n                totalSum +=  key.valuePln;\r\n            }\r\n            let totalSumFix = parseFloat(totalSum.toFixed(2));\r\n            this.setState({total: totalSumFix});\r\n        };\r\n    }\r\n\r\n    inputCurrentHandler = (e) => {\r\n        const valueCurrent = e.target.value;\r\n        const valueCurFix= parseFloat(parseFloat(valueCurrent).toFixed(2));\r\n        this.setState({currentRate: valueCurFix });\r\n\r\n        //recalculation\r\n        this.currentChengeRecalculation(valueCurFix);\r\n    }\r\n\r\n    inputNameHandler = (e) => {\r\n        const valueName = e.target.value;\r\n        this.setState({transactionName: valueName})\r\n    }\r\n\r\n    inputValueHandler = (e) => {\r\n        const value = e.target.value;\r\n        const  valueFix= parseFloat(parseFloat(value).toFixed(2)) ;\r\n        this.setState({transactionValue: valueFix})\r\n    }\r\n\r\n    totalSumCalculation = (trans) => {\r\n        let totalSum = 0;\r\n        for (const key of trans ){\r\n            totalSum +=  key.valuePln;\r\n        }\r\n        let totalSumFix = parseFloat(totalSum.toFixed(2));\r\n        this.setState({total: totalSumFix});\r\n    }\r\n\r\n    //Determining transaction with max value\r\n    maxValueCalculation = (transactions) => {\r\n        let valueArr = []; \r\n        if (transactions.length > 0 ) {\r\n            for (let key of transactions ) {\r\n                valueArr.push(key.valuePln)\r\n            };\r\n    \r\n            let maxValue =  valueArr.reduce((a, b) => {\r\n                return Math.max(a, b);\r\n            }) \r\n    \r\n            let indexOfMax = valueArr.findIndex( el => el === maxValue);\r\n            let maxObject = transactions.find((_,index) => index === indexOfMax);\r\n\r\n            this.setState({ maxTransaction: maxObject});\r\n\r\n        //set empty object if the latest transaction was deleted\r\n        }else if (transactions.length === 0){\r\n            this.setState({ maxTransaction: {} });\r\n        };\r\n    }\r\n\r\n    addTransactionHandler = () => {\r\n        //creat transaction object\r\n        if ( this.state.currentRate !== 0 && this.state.transactionValue !== 0 &&  this.state.transactionName.length>0\r\n            && !isNaN(this.state.currentRate ) && !isNaN(this.state.transactionValue)) {\r\n            const CurrencyCalc = parseFloat((this.state.currentRate * this.state.transactionValue).toFixed(2));\r\n            const transaction = {\r\n                name: this.state.transactionName,\r\n                valueEuro: this.state.transactionValue,\r\n                valuePln: CurrencyCalc, \r\n            }\r\n    \r\n            //push it to the state transactions array\r\n            const newTransactions = [...this.state.transactions];\r\n            newTransactions.push(transaction);\r\n    \r\n            //update the state\r\n            this.setState({\r\n                transactions: newTransactions,\r\n                transactionName: '',\r\n                transactionValue: 0,\r\n                });\r\n    \r\n            //clear the input\r\n            let userInputName = document.getElementById('userInputName');\r\n            userInputName.value =  null;\r\n            let userInputValue = document.getElementById('userInpuValue');\r\n            userInputValue.value =  null;\r\n    \r\n            //calculating transactions total sum\r\n            this.totalSumCalculation(newTransactions);\r\n    \r\n            //calculation  of the max value\r\n            this.maxValueCalculation(newTransactions);\r\n\r\n        }else if (isNaN(this.state.currentRate ) || isNaN(this.state.transactionValue)){\r\n            alert(`Please, enter valid values`)\r\n        } else {\r\n            alert(`Please, fill in all the values`)\r\n        }\r\n    }\r\n\r\n    deleteTransactionItemHandler = (e, index) => {\r\n        //delete el-t from the state\r\n        const elIndex = index;\r\n        const newTransactions = [ ...this.state.transactions];\r\n        newTransactions.splice(elIndex, 1);\r\n        this.setState({transactions: newTransactions});\r\n\r\n        //recalculation  of the total sum\r\n        this.totalSumCalculation(newTransactions);\r\n\r\n        //recalculation  of the max value\r\n        this.maxValueCalculation(newTransactions);\r\n\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <Fragment>\r\n                <StateContext.Provider value={{\r\n                                    currentRate: this.state.currentRate,\r\n                                    transactionName: this.state.transactionName,\r\n                                    transactionValue: this.state.transactionValue,\r\n                                    transactions: this.state.transactions,\r\n                                    total: this.state.total,\r\n                                    maxTransaction: this.state.maxTransaction     \r\n                                    }}>\r\n                    <div className={classes.InputBox}>\r\n                        <InputCurrent   input={this.inputCurrentHandler} \r\n                                        checking={this.state.currentRate}/>\r\n                        <InputMainBox addTransaction={this.addTransactionHandler}>\r\n                            <InputUserValue input={this.inputNameHandler}\r\n                                            checking={this.state.transactionName}\r\n                                            id='userInputName' \r\n                                            label=\"Transaction's title:\"\r\n                                            placeholder='title'/>\r\n                            <InputUserValue input={this.inputValueHandler}\r\n                                            checking={this.state.transactionValue}\r\n                                            id='userInpuValue'\r\n                                            placeholder='EURO' \r\n                                            label=\"Transaction's value:\"/>\r\n                        </InputMainBox>\r\n                    </div>\r\n                    <TransactionSummary delete={this.deleteTransactionItemHandler} />\r\n                </StateContext.Provider>\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n};\r\n\r\n\r\nexport default TransactionInput;","import React, {Component}from 'react';\nimport './App.css';\nimport classes from './App.module.css';\nimport TransactionBuild from './Container/TransactionBuild';\n\n\n\nclass App extends Component {\n  render () {\n    return (\n      <div className={classes.App}>\n        <TransactionBuild/>\n      </div>\n    );\n  }\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './index.module.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}